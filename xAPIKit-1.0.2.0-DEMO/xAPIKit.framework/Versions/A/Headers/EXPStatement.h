//
//  EXPStatement.h
//  EXPAPI
//
//  Copyright (c) 2013 Float Mobile Learning. All rights reserved.
//  http://floatlearning.com/
//
//  Project assistance from Rustici Software.
//  http://scorm.com/
//

#import <xAPIKit/EXPStatementObject.h>
#import <xAPIKit/EXPStatementSignature.h>

extern NSString* const kEXPStatementId;
extern NSString* const kEXPStatementActor;
extern NSString* const kEXPStatementVerb;
extern NSString* const kEXPStatementInProgress;
extern NSString* const kEXPStatementObject;
extern NSString* const kEXPStatementResult;
extern NSString* const kEXPStatementContext;
extern NSString* const kEXPStatementTimestamp;
extern NSString* const kEXPStatementAuthority;
extern NSString* const kEXPStatementVoided;

@class EXPAgent, EXPResult, EXPContext, EXPStatementVerb;

/**
 Represents a xAPI statement to be sent to the API.
 A simple statement consisting of [Actor (learner)] [verb] [object], with [result], in [context] 
 to track an aspect of a learning experience. A set of several statements may be used to track complete details about a learning experience.
 */
@interface EXPStatement : EXPStatementObject

/**
 The ID for the statement. SHOULD be assigned by the activity provider; MUST be generated by the LRS if the activity provider does not provide.
 */
@property (nonatomic, strong) NSString *sid;

/**
 Learner or Team object the statement is about (the "I" in the statement). 
 If not specified, LRS will infer based on authentication, and populate the actor.
 */
@property (nonatomic, strong) EXPAgent *actor;

/**
 The "verb" portion of the statement.
 */
@property (nonatomic, strong) EXPStatementVerb *verb;

/**
 Activity, agent, or another statement that is the object of the statement (the "this" portion).
 */
@property (nonatomic, strong) EXPStatementObject *object;

/**
 More details relevant to the specified verb.
 */
@property (nonatomic, strong) EXPResult *result;

/**
 Context that gives the statement more meaning.
 */
@property (nonatomic, strong) EXPContext *context;

/**
 The timestamp of when what this statement describes happened.
 */
@property (nonatomic, strong) NSDate *timestamp;

/**
 Timestamp of when the statement was recorded (set by the LRS).
 */
@property (weak, nonatomic, readonly) NSDate *stored;

/**
 Actor who is asserting this statement is true. Verified by the LRS based on authentication
 and set by the LRS if authority is left blank.
 */
@property (nonatomic, strong) EXPAgent *authority;

/**
 Indicates that the statement has been voided.
 */
@property (nonatomic) BOOL voided;

/**
 xAPI version the statement conforms to, formatted according to [Semantic Versioning 1.0.0](http://semver.org/spec/v1.0.0.html)
 */
@property (nonatomic, strong) NSString *version;

/**
 Headers for attachments to the statement
 */
@property (nonatomic, strong, readonly) NSArray *attachments;

/**
 A reference to the statement's signature.
 Only available on signed statements returned from the LRS OR after signing the statement.
 */
@property (nonatomic, strong, readonly) EXPStatementSignature *signature;

/**
 YES if this statement can be voided; NO otherwise.
 Only statements that have not been voided and are not voiding statements can be voided.
 */
@property (nonatomic, readonly) BOOL canBeVoided;

/**
 Add a single attachment. Attachment must not be nil and must be of type EXPStatementAttachment.
 @param attachment   Adds attachment to statement.
 */
- (void) addAttachment:(EXPStatementAttachment *)attachment;

/**
 Adds multiple attachments. All attachments must be defined and must be of type EXPStatementAttachment.
 @param attachments  The attachments to add to the statement.
 */
- (void) addAttachments:(NSArray *)attachments;

/**
 Removes the specified attachment from the statement (if it is attached).
 If the statement does not have this attachment, then this method won't do anything.
 @param attachment   The attachment to remove.
 */
- (void) removeAttachment:(EXPStatementAttachment *)attachment;

/**
 Removes the specified attachments from the statement (if they are attached).
 If any of the attachments are not attached to this statement then they are skipped.
 @param attachments  The attachments to remove.
 */
- (void) removeAttachments:(NSArray *)attachments;

/**
 Removes all attachments from the statement.
 */
- (void) removeAllAttachments;

/**
 Creates and computes the signature for the statement.
 
 This creates a EXPStatementSignature object and invokes the signStatementWithPKCS12:usingPassphrase:withAlgorithm:options:error: method. After it has been calculated, the signature is added to the attachments.
 
 By default, a EXPStatementSignature object has a display name of "Signature". After signing the statement, you can change the display or description by accessing the signature property on the statement.
 
 Note that this signature is generated based the state of the statement at the time of signing. It should be the last thing you do with the statement before persisting to the LRS. If you change the statement after creating the signature, you must invalidate the signature (invalidateSignature) and create it again.
 
 @param p12          The data of a PKCS12 file (http://en.wikipedia.org/wiki/PKCS_♯12) to use for signing. This file should contain the private key and X.509 certificate chain.
 @param passphrase   The passphrase of the PKCS12 file. It is STRONGLY RECOMMENDED that your PKCS12 file be protected by a passphrase and that the passphrase is at least 20 characters long containing both numbers and symbols.
 @param algorithm    The signing algorithm to use when generating the signature. Currently, the xAPI iOS SDK only supports the RS256 algorithm.
 @param options      Adjusts how the statement gets signed. Currently, only the kEXPStatementSigningOptionIgnoreProperties option is available.
 @param error        Contains an error on return if the statement was not generated successfully.
 @return                YES if the signature was generated succesfully.
 */
- (BOOL) signStatementWithPKCS12:(NSData *)p12 usingPassphrase:(NSString *)passphrase withAlgorithm:(EXPStatementSigningAlgorithm)algorithm options:(NSDictionary *)options error:(NSError **)error;

/**
 Creates and computes the signature for the statement using the RS256 signing algorithm and no additional options
 
 @see signStatementWithPKCS12:usingPassphrase:withAlgorithm:options:error:
 
 @param p12          The data of a PKCS12 file (http://en.wikipedia.org/wiki/PKCS_♯12) to use for signing. This file should contain the private key and X.509 certificate chain.
 @param passphrase   The passphrase of the PKCS12 file. It is STRONGLY RECOMMENDED that your PKCS12 file be protected by a passphrase and that the passphrase is at least 20 characters long containing both numbers and symbols.
 @param error        Contains an error on return if the statement was not generated successfully.
 @return                YES if the signature was generated succesfully.
 */
- (BOOL) signStatementWithPKCS12:(NSData *)p12 usingPassphrase:(NSString *)passphrase error:(NSError **)error;

/**
 Invalidates and removes the statement's signature.
 */
- (void) invalidateSignature;

/**
 Instantiates a statement with an actor, verb, and object.
 
 @param aActor  The EXPAgent to use as the actor for the statement.
 @param aVerb   The EXPStatementVerb that indicates what happened.
 @param aObject The object of the statement.
 @return        The initalized statement.
 */
- (id) initWithActor:(EXPAgent *)aActor statementVerb:(EXPStatementVerb *)aVerb andObject:(EXPStatementObject *)aObject;

/**
 Instantiates a statement with a verb and object.
 When this verb is stored in the queue, the actor is assigned to the defaultActor on EXPAPI.
 
 @param aVerb   The EXPStatementVerb that indicates what happened.
 @param aObject The object of the statement.
 @return        The initalized statement.
 @remarks    Calls +statementWithActor:statementVerb:andObject: with actor set to nil.
 */
+ (EXPStatement *) statementWithVerb:(EXPStatementVerb *)aVerb andObject:(EXPStatementObject *)aObject;

/**
 Instantiates a statement with an actor, verb, and object.
 
 @param aActor  The EXPAgent to use as the actor for the statement.
 @param aVerb   The EXPStatementVerb that indicates what happened.
 @param aObject The object of the statement.
 @return        The initalized statement.
 */
+ (EXPStatement *) statementWithActor:(EXPAgent *)aActor statementVerb:(EXPStatementVerb *)aVerb andObject:(EXPStatementObject *)aObject;

/**
 Generates a unique ID for the statement.
 */
+ (NSString *) generateUUID;

/**
 Generates a voiding statement for this statement.
 The voiding statement is a new statement with the verb set to "voided", the object set to the current statement (just the ID and statement type),
 and the actor set to the specified actor.
 
 @param aActor  The actor that is voiding the statement. If set to nil, it will use the actor of the original statement as the actor of the voiding statement.
 @return        A new voiding statement for this statement. This statement must be persisted on the LRS for the voiding to actually take place.
                It will return nil if the statement cannot be voided.
 */
- (EXPStatement *) generateVoidingStatementWithActor:(EXPAgent *)aActor;

@end
